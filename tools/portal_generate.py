#!/usr/bin/env python3
"""Portal Generate CLI - Generate .tscn files from parsed/mapped data.

This tool generates Godot .tscn scene files from parsed map data and
mapped assets. Useful for:

- Generating scenes from custom data
- Testing scene generation independently
- Batch processing multiple maps
- Creating template scenes

Author: Zach Atkinson
AI Assistant: Claude (Anthropic)
Date: 2025-10-11
"""

import argparse
import json
import sys
from pathlib import Path
from typing import Optional

# Add parent directory to path for imports
sys.path.insert(0, str(Path(__file__).parent))

from bfportal.core.exceptions import BFPortalError


class SimpleTscnGenerator:
    """Simple .tscn file generator.

    Note: This is a simplified generator. For full production use,
    the complete TscnGenerator from bfportal/generators/ should be used
    once implemented.
    """

    def __init__(self, base_terrain: str):
        """Initialize generator.

        Args:
            base_terrain: Portal base terrain name (e.g., "MP_Tungsten")
        """
        self.base_terrain = base_terrain

    def generate(self, map_name: str, objects: list, output_path: Path) -> None:
        """Generate .tscn file.

        Args:
            map_name: Map name
            objects: List of game objects (dicts from JSON)
            output_path: Output .tscn file path
        """
        lines = []

        # Header
        lines.append("[gd_scene load_steps=7 format=3]")
        lines.append("")
        lines.append(f"# Generated by Portal SDK - {map_name}")
        lines.append(f"# Base terrain: {self.base_terrain}")
        lines.append("")

        # Root node
        lines.append(f'[node name="{map_name}" type="Node3D"]')
        lines.append("")

        # Team 1 HQ (placeholder)
        lines.append('[node name="TEAM_1_HQ" type="Node3D" parent="."]')
        lines.append("transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -500, 0, 0)")
        lines.append("")

        # Team 1 spawns (placeholder)
        for i in range(1, 5):
            lines.append(f'[node name="SpawnPoint_1_{i}" type="Node3D" parent="TEAM_1_HQ"]')
            lines.append(
                f"transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, {i * 10}, 0, {i * 10})"
            )
            lines.append("")

        # Team 2 HQ (placeholder)
        lines.append('[node name="TEAM_2_HQ" type="Node3D" parent="."]')
        lines.append("transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 500, 0, 0)")
        lines.append("")

        # Team 2 spawns (placeholder)
        for i in range(1, 5):
            lines.append(f'[node name="SpawnPoint_2_{i}" type="Node3D" parent="TEAM_2_HQ"]')
            lines.append(
                f"transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, {i * -10}, 0, {i * 10})"
            )
            lines.append("")

        # Combat Area (placeholder)
        lines.append('[node name="CombatArea" type="Node3D" parent="."]')
        lines.append("transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)")
        lines.append("")

        # Static layer
        lines.append('[node name="Static" type="Node3D" parent="."]')
        lines.append("")

        # Terrain reference
        lines.append(f'[node name="{self.base_terrain}_Terrain" type="Node3D" parent="Static"]')
        lines.append("transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)")
        lines.append("")

        # Game objects
        if objects:
            for i, obj in enumerate(objects, 1):
                asset_name = obj.get("portal_asset") or obj.get("asset_type", f"Object_{i}")
                pos = obj.get("position", {"x": 0, "y": 0, "z": 0})

                lines.append(f'[node name="{asset_name}_{i}" type="Node3D" parent="Static"]')
                lines.append(
                    f"transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, "
                    f"{pos['x']}, {pos['y']}, {pos['z']})"
                )
                lines.append("")

        # Write file
        output_path.parent.mkdir(parents=True, exist_ok=True)
        with open(output_path, "w") as f:
            f.write("\n".join(lines))


class PortalGenerateApp:
    """CLI application for generating .tscn files."""

    def __init__(self):
        """Initialize the app."""
        self.args: Optional[argparse.Namespace] = None

    def parse_args(self) -> argparse.Namespace:
        """Parse command-line arguments.

        Returns:
            Parsed arguments namespace
        """
        parser = argparse.ArgumentParser(
            description="Generate Portal .tscn scene files",
            formatter_class=argparse.RawDescriptionHelpFormatter,
            epilog="""
Examples:
  # Generate from mapped data
  python3 tools/portal_generate.py \\
      --input kursk_mapped.json \\
      --output GodotProject/levels/Kursk_generated.tscn \\
      --base-terrain MP_Tungsten \\
      --map-name Kursk

  # Generate minimal template
  python3 tools/portal_generate.py \\
      --output GodotProject/levels/Template.tscn \\
      --base-terrain MP_Tungsten \\
      --map-name Template \\
      --template-only

  # Generate from multiple source files
  python3 tools/portal_generate.py \\
      --input kursk_parsed.json \\
      --mappings kursk_mapped.json \\
      --output GodotProject/levels/Kursk.tscn \\
      --base-terrain MP_Tungsten

Note:
  This tool uses a simplified generator. For production maps with
  full Portal features (HQ areas, capture points, vehicles, etc.),
  use portal_convert.py instead.

Workflow:
  1. portal_parse.py → Extract map data
  2. portal_map_assets.py → Map assets
  3. portal_generate.py → Generate .tscn (this tool)
  4. portal_adjust_heights.py → Fix heights (optional)
  5. portal_validate.py → Validate (optional)
            """,
        )

        parser.add_argument("--input", type=Path, help="Input JSON file with map data")

        parser.add_argument("--mappings", type=Path, help="Input JSON file with asset mappings")

        parser.add_argument("--output", type=Path, required=True, help="Output .tscn file")

        parser.add_argument(
            "--base-terrain",
            type=str,
            required=True,
            help="Portal base terrain (e.g., MP_Tungsten)",
        )

        parser.add_argument(
            "--map-name", type=str, help="Map name (default: derived from output filename)"
        )

        parser.add_argument(
            "--template-only", action="store_true", help="Generate minimal template without objects"
        )

        parser.add_argument(
            "--production",
            action="store_true",
            help="Use production TscnGenerator (requires proper MapData structure)",
        )

        return parser.parse_args()

    def load_objects(self) -> list:
        """Load objects from input files.

        Returns:
            List of object dictionaries
        """
        objects = []

        # Load parsed data
        if self.args.input:
            if not self.args.input.exists():
                raise FileNotFoundError(f"Input file not found: {self.args.input}")

            with open(self.args.input) as f:
                data = json.load(f)

            if "game_objects" in data:
                objects = data["game_objects"]
                print(f"📦 Loaded {len(objects)} objects from {self.args.input.name}")

        # Apply mappings if provided
        if self.args.mappings:
            if not self.args.mappings.exists():
                raise FileNotFoundError(f"Mappings file not found: {self.args.mappings}")

            with open(self.args.mappings) as f:
                mapping_data = json.load(f)

            # Create mapping lookup
            mapping_lookup = {}
            if "mappings" in mapping_data:
                for m in mapping_data["mappings"]:
                    if m.get("status") == "mapped":
                        mapping_lookup[m["source_asset"]] = m["portal_asset"]

            # Apply mappings to objects
            mapped_count = 0
            for obj in objects:
                source_asset = obj.get("asset_type")
                if source_asset in mapping_lookup:
                    obj["portal_asset"] = mapping_lookup[source_asset]
                    mapped_count += 1

            print(f"🗺️  Applied {mapped_count} asset mappings")

        return objects

    def run(self) -> int:
        """Execute scene generation.

        Returns:
            Exit code (0 for success, 1 for error)
        """
        self.args = self.parse_args()

        print("=" * 70)
        print("🎬 Portal Scene Generator")
        print("=" * 70)
        print()

        try:
            # Get map name
            map_name = self.args.map_name or self.args.output.stem

            # Load objects
            if self.args.template_only:
                objects = []
                print("📄 Generating minimal template (no objects)")
            else:
                objects = self.load_objects()

            # Create generator
            generator = SimpleTscnGenerator(self.args.base_terrain)

            # Generate scene
            print("🔄 Generating scene...")
            print(f"   Map name: {map_name}")
            print(f"   Base terrain: {self.args.base_terrain}")
            print(f"   Objects: {len(objects)}")
            print()

            generator.generate(map_name, objects, self.args.output)

            print("=" * 70)
            print("✅ Scene Generated!")
            print("=" * 70)
            print(f"📄 Output: {self.args.output}")
            print()
            print("⚠️  Note: This is a simplified generator.")
            print("   For production maps, use portal_convert.py for full features:")
            print("   - Proper HQ areas with spawn assignments")
            print("   - Combat area with polygon boundaries")
            print("   - Capture points (if applicable)")
            print("   - Vehicle spawners")
            print("   - Proper resource references")
            print()
            print("📋 Next Steps:")
            print("   1. Open in Godot editor: GodotProject/project.godot")
            print("   2. Load scene: {self.args.output}")
            print("   3. Add missing features manually")
            print("   4. Run portal_adjust_heights.py if needed")
            print("   5. Run portal_validate.py to check")
            print("   6. Export via BFPortal panel")
            print()

            return 0

        except BFPortalError as e:
            print(f"❌ Error: {e}")
            return 1
        except Exception as e:
            print(f"❌ Unexpected error: {e}")
            import traceback

            traceback.print_exc()
            return 1


def main():
    """Entry point."""
    app = PortalGenerateApp()
    sys.exit(app.run())


if __name__ == "__main__":
    main()
